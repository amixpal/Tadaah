version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Exposing RabbitMQ's default AMQP port
      - "15672:15672"  # Exposing RabbitMQ Management UI port for monitoring

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"  # Exposing MongoDB's default port
    volumes:
      - mongo-data:/data/db  # Persisting MongoDB data in a Docker volume
    healthcheck:
      test: "echo 'db.runCommand({ ping: 1 })' | mongo"  # Health check to ping MongoDB
      interval: 10s  # Interval between health checks
      timeout: 5s  # Time to wait before considering the health check failed
      retries: 5  # Number of retries before marking the container as unhealthy

  document-service:
    build:
      context: .  # Context for the Docker build (current directory)
      dockerfile: document-service/Dockerfile  # Dockerfile to build the document service
    container_name: document-service
    ports:
      - "8080:8080"  # Exposing the main application port
      - "9090:9090"  # Exposing the management port for Actuator endpoints
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/documentdb  # MongoDB connection URI
      - NOTIFICATION_SERVICE_URL=http://notification-service:8081/api/notifications  # Notification service URL
      - SERVER_PORT=8080  # Main application port
      - MANAGEMENT_SERVER_PORT=9090  # Management (Actuator) port
    depends_on:
      - mongo  # Ensures mongo starts before this service
    healthcheck:
      test: curl --fail http://localhost:9090/actuator/health || exit 1  # Health check using the Actuator's health endpoint
      interval: 30s  # Interval between health checks
      timeout: 10s  # Time to wait before considering the health check failed
      retries: 5  # Number of retries before marking the container as unhealthy

  notification-service:
    build:
      context: .  # Context for the Docker build (current directory)
      dockerfile: notification-service/Dockerfile  # Dockerfile to build the notification service
    container_name: notification-service
    ports:
      - "8081:8081"  # Exposing the main application port
      - "9091:9091"  # Exposing the management port for Actuator endpoints
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/notificationdb  # MongoDB connection URI
      - SERVER_PORT=8081  # Main application port
      - MANAGEMENT_SERVER_PORT=9091  # Management (Actuator) port
      - SPRING_RABBITMQ_HOST=rabbitmq  # RabbitMQ host, pointing to the Docker service name
      - SPRING_RABBITMQ_PORT=5672  # RabbitMQ AMQP port
    depends_on:
      - mongo  # Ensures mongo starts before this service
      - rabbitmq  # Ensures rabbitmq starts before this service
    healthcheck:
      test: curl --fail http://localhost:9091/actuator/health || exit 1  # Health check using the Actuator's health endpoint
      interval: 30s  # Interval between health checks
      timeout: 10s  # Time to wait before considering the health check failed
      retries: 5  # Number of retries before marking the container as unhealthy
volumes:
  mongo-data:
